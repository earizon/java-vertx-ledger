Get Config parameters related to ILP protocol:
import org.interledger.ilp.core.LedgerInfo;
import org.interledger.ilp.ledger.LedgerFactory;
    LedgerInfo ledgerInfo = LedgerFactory.getDefaultLedger().getInfo();
    String ledger = ((SimpleLedger)LedgerFactory.getDefaultLedger()).getConfig().getPublicURI().toString();

-------------------
import org.interledger.ilp.common.config.Config;
import org.interledger.ilp.ledger.LedgerFactory;
import org.interledger.ilp.ledger.impl.simple.SimpleLedger;

Get Internal Config parameters (related to ledger implementation):
    Config config = ((SimpleLedger)LedgerFactory.getDefaultLedger()).getConfig();
    String public_key = config.getString(SERVER, ED25519, PUBLIC_KEY);

-------------------

Abort request and Launch Exception:
    import org.interledger.ilp.common.api.util.ILPExceptionSupport;
    import org.interledger.ilp.exceptions.InterledgerException;
    import org.interledger.ilp.exceptions.InterledgerException.ErrorCode;
    
    ILPExceptionSupport.launchILPException(InterledgerException.ErrorCode.XXX , "..."/* data */)
    or (with default INTERNAL ERROR)
    ILPExceptionSupport.launchILPException(this.getClass().getName() + " constructor params can NOT be null"/* data */);
    ILPExceptionSupport.launchILPForbiddenException();



    Note:
    This InterledgerException is captured by default in RestEndpointHandler.java and a JSON response mapping
    the exception is returned. The RestEndpointHandler related code is similar to:
        | try {
        |     switch (context.request().method()) {
        |         case GET:
        |             handleGet(context);
        |             break;
        |         ...
        |     }
        | } catch (InterledgerException ex ) {
        |     response(context, ex.getException().getHTTPErrorCode(), buildJSON(ex.getException().getsID(), ex.getDescription()));
        | }

-------------------------
LedgerFactory.getDefaultLedger().getInfo().getCurrencyUnit().getCurrencyCode()
-------------------------
    protected void handleGet(RoutingContext context) {
        AuthManager.getInstance().authenticate(context, res -> {
            AuthInfo authInfo = res.result();
            if (res.succeeded()) {
                handleAuthorizedGet(context, authInfo);
            } else if (authInfo.isEmpty()) {
                String accountName = getAccountName(context);
                if (StringUtils.isNotBlank(accountName)) {
                    handleAuthorizedGet(context, null);
                } else {
                    throw new InterledgerException(InterledgerException.RegisteredException.BadRequestError, "Required param " + PARAM_NAME);
                }
            } else {
                throw new InterledgerException(InterledgerException.RegisteredException.ForbiddenError, "");
            }
        });
    }